-- 대출 시 가용 수량 감소 트리거
CREATE OR REPLACE TRIGGER TRG_BOOK_BORROW
    AFTER INSERT ON LOANS
    FOR EACH ROW
BEGIN
    UPDATE BOOKS
    SET AVAILABLE_AMOUNT = AVAILABLE_AMOUNT - 1
    WHERE BOOK_ID = :NEW.BOOK_ID;

    DBMS_OUTPUT.PUT_LINE('책 대출됨 - 가용수량 감소');
END;
/

-- 반납 시 가용 수량 증가 트리거
CREATE OR REPLACE TRIGGER TRG_BOOK_RETURN
    AFTER UPDATE ON LOANS
    FOR EACH ROW
    WHEN (OLD.STATUS = 'BORROWED' AND NEW.STATUS = 'RETURNED')
BEGIN
    UPDATE BOOKS
    SET AVAILABLE_AMOUNT = AVAILABLE_AMOUNT + 1
    WHERE BOOK_ID = :NEW.BOOK_ID;

    DBMS_OUTPUT.PUT_LINE('책 반납됨 - 가용수량 증가');
END;
/

-- RETURNED 시 마일리지 자동 적립
CREATE OR REPLACE TRIGGER TRG_MILEAGE_REWARD
    AFTER INSERT ON LOANS
    FOR EACH ROW
DECLARE
    v_current_mileage USERS.MILEAGE%TYPE;
    v_bonus_points NUMBER := 1;
BEGIN
    SELECT MILEAGE INTO v_current_mileage
    FROM USERS
    WHERE USER_ID = :NEW.USER_ID;

    IF v_current_mileage = 0 THEN
        v_bonus_points := 10;
    END IF;

    UPDATE USERS
    SET MILEAGE = MILEAGE + v_bonus_points,
        UPDATED_AT = SYSTIMESTAMP
    WHERE USER_ID = :NEW.USER_ID;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('사용자를 찾을 수 없음');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('마일리지 적립 오류: ' || SQLERRM);
END;
/

-- 시퀀스 트리거 추가
CREATE OR REPLACE TRIGGER TRG_LOANS_ID
    BEFORE INSERT ON LOANS
    FOR EACH ROW
BEGIN
    :NEW.LOAN_ID := loan_seq.NEXTVAL;
END;
/

--예약 트리거 추가
CREATE OR REPLACE TRIGGER TRG_RESV_ID
BEFORE INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
    IF :NEW.RESV_ID IS NULL THEN
        :NEW.RESV_ID := resv_seq.NEXTVAL;
    END IF;
END;
/